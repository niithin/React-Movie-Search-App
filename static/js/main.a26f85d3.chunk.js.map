{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","key","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","state","performSearch","searchTerm","fetch","then","response","json","data","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","event","target","trim","length","alert","className","style","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NA0BeA,G,gLAtBP,IAAMC,EAAI,oCAAoCC,KAAKC,MAAMC,MAAMC,GAC/DC,OAAOC,SAASC,KAAKP,I,+BAGrB,OAAO,2BAAOQ,IAAKP,KAAKC,MAAMC,MAAMC,IACpC,+BACE,4BACE,4BACE,yBAAKK,IAAI,SAASC,MAAM,MAAMC,IAAKV,KAAKC,MAAMC,MAAMS,cAEtD,4BACE,4BAAKX,KAAKC,MAAMC,MAAMU,OACtB,2BAAIZ,KAAKC,MAAMC,MAAMW,UACrB,2BAAOC,KAAK,SAASC,QAASf,KAAKgB,UAAUC,KAAKjB,MAAOkB,MAAM,iB,GAftDC,IAAMC,YCwEdC,E,kDApEb,WAAYpB,GAAO,IAAD,8BAChB,cAAMA,IACDqB,MAAM,GACX,EAAKC,gBAHW,E,0DAOJC,GAAY,IAAD,OAEvBC,MADgB,4FAA4FD,GAEzGE,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GACJ,IAAMC,EAAQD,EAAKC,QACfC,EAAU,GACdD,EAAQE,SAAQ,SAAC9B,GACfA,EAAMS,WAAW,kCAAoCT,EAAM+B,YAC3D,IAAMC,EAAS,kBAAC,EAAD,CAAU3B,IAAKL,EAAMC,GAAID,MAAOA,IAC/C6B,EAAUI,KAAKD,MAGjB,EAAKE,SAAS,CAACC,KAAKN,S,0CAKNO,GAClB,IACMd,EAAWc,EAAMC,OAAOrB,MAC3BM,EAAWgB,OAAOC,OAAS,EAFZzC,KAGNuB,cAAcC,GAEvBkB,MAAM,mB,+BAKX,OACE,6BACE,2BAAOC,UAAU,YACf,+BACE,4BACE,4BACE,yBAAKnC,IAAI,WAAWC,MAAM,KAAKC,IAAI,kBAErC,wBAAID,MAAM,MACV,4BACE,6CAMR,2BAAOmC,MAAO,CACZC,SAAS,GACTC,QAAQ,QACRrC,MAAM,MACNsC,WAAW,EACXC,cAAc,EACdC,YAAY,IACXC,SAAUlD,KAAKmD,oBAAoBlC,KAAKjB,MAAOoD,YAAY,uBAE7DpD,KAAKsB,MAAMe,U,GA9DAlB,IAAMC,WCOJiC,QACW,cAA7BjD,OAAOC,SAASiD,UAEe,UAA7BlD,OAAOC,SAASiD,UAEhBlD,OAAOC,SAASiD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a26f85d3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass MovieRow extends React.Component{\r\n    viewMovie(){\r\n        const url=\"https://www.themoviedb.org/movie/\"+this.props.movie.id\r\n        window.location.href=url\r\n    }\r\n    render(){\r\n        return <table key={this.props.movie.id}>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <img alt=\"poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n            </td>\r\n            <td>\r\n              <h3>{this.props.movie.title}</h3>\r\n              <p>{this.props.movie.overview}</p>\r\n              <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"view\"/>\r\n\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    }\r\n}\r\n\r\nexport default MovieRow","import React from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={}\n    this.performSearch()\n\n  }\n\n  performSearch(searchTerm){\n    const urlString='https://api.themoviedb.org/3/search/movie?api_key=1b5adf76a72a13bad99b8fc0c68cb085&query='+searchTerm\n    fetch(urlString)\n      .then(response=>response.json())\n      .then(data=>{\n        const results=data.results\n        var movieRows=[]\n        results.forEach((movie)=>{\n          movie.poster_src=\"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n          const movieRow=<MovieRow key={movie.id} movie={movie}/>\n          movieRows.push(movieRow)\n        })\n\n        this.setState({rows:movieRows})\n\n      })\n  }\n\n  searchChangeHandler(event){\n    const boundObject=this\n    const searchTerm=event.target.value\n    if(searchTerm.trim().length > 0){\n    boundObject.performSearch(searchTerm)\n    }else{\n       alert(\"give an input\")\n    }\n  }\n\n  render(){\n  return (\n    <div>\n      <table className=\"titleBar\">\n        <tbody>\n          <tr>\n            <td>\n              <img alt=\"app icon\" width=\"50\" src=\"download.png\"/>\n            </td>\n            <td width=\"8\"/>\n            <td>\n              <h1>Show_Time</h1>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <input style={{\n        fontSize:24,\n        display:'block',\n        width:'99%',\n        paddingTop:8,\n        paddingBottom:8,\n        paddingLeft:16\n      }} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Search For a Movie\"/>\n\n      {this.state.rows}\n\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}